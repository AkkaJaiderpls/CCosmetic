{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { v4 as uuidv4 } from \"uuid\";\nimport { CART } from \"../variables\";\nconst initialState = [];\nexport default function cartReducer(state = initialState, action) {\n  const cartItem = state.find(item => item.cartId === action.cartId);\n  const cartItemIndex = cartItem && state.indexOf(cartItem);\n  switch (action.type) {\n    case CART.ADD_TO_CART:\n      if (!action.product.variation || action.product.variation.length === 0) {\n        const addedCartItem = state.find(item => item.id === action.product.id);\n        const addedCartItemIndex = addedCartItem && state.indexOf(addedCartItem);\n        if (!addedCartItem) {\n          return [...state, _objectSpread(_objectSpread({}, action.product), {}, {\n            cartQuantity: action.quantity || 1,\n            cartId: uuidv4()\n          })];\n        } else {\n          return [...state.slice(0, addedCartItemIndex), _objectSpread(_objectSpread({}, addedCartItem), {}, {\n            cartQuantity: action.quantity ? addedCartItem.cartQuantity + action.quantity : addedCartItem.cartQuantity + 1\n          }), ...state.slice(addedCartItemIndex + 1)];\n        }\n      } else {\n        if (!action.color || action.color === \"\") {\n          const addedCartItem = state.find(item => item.id === action.product.id);\n          const addedCartItemIndex = addedCartItem && state.indexOf(addedCartItem);\n          if (!addedCartItem) {\n            return [...state, _objectSpread(_objectSpread({}, action.product), {}, {\n              cartQuantity: action.quantity || 1,\n              cartId: uuidv4()\n            })];\n          } else {\n            return [...state.slice(0, addedCartItemIndex), _objectSpread(_objectSpread({}, addedCartItem), {}, {\n              cartQuantity: action.quantity ? addedCartItem.cartQuantity + action.quantity : addedCartItem.cartQuantity + 1\n            }), ...state.slice(addedCartItemIndex + 1)];\n          }\n        } else {\n          const addedCartItem = state.find(item => item.id === action.product.id && item.selectedColor && item.selectedColor === action.color);\n          const addedCartItemIndex = addedCartItem && state.indexOf(addedCartItem);\n          if (!addedCartItem) {\n            return [...state, _objectSpread(_objectSpread({}, action.product), {}, {\n              cartQuantity: action.quantity || 1,\n              selectedColor: action.color,\n              cartId: uuidv4()\n            })];\n          } else {\n            return [...state.slice(0, addedCartItemIndex), _objectSpread(_objectSpread({}, addedCartItem), {}, {\n              cartQuantity: action.quantity ? addedCartItem.cartQuantity + action.quantity : addedCartItem.cartQuantity + 1\n            }), ...state.slice(addedCartItemIndex + 1)];\n          }\n        }\n      }\n    case CART.REMOVE_FROM_CART:\n      return [...state.slice(0, cartItemIndex), ...state.slice(cartItemIndex + 1)];\n    case CART.REMOVE_ALL_FROM_CART:\n      return [];\n    case CART.INCREASE_QUANTITY_CART:\n      return [...state.slice(0, cartItemIndex), _objectSpread(_objectSpread({}, cartItem), {}, {\n        cartQuantity: cartItem.cartQuantity + 1\n      }), ...state.slice(cartItemIndex + 1)];\n    case CART.DECREASE_QUANTITY_CART:\n      if (cartItem.cartQuantity < 2) {\n        return;\n      }\n      return [...state.slice(0, cartItemIndex), _objectSpread(_objectSpread({}, cartItem), {}, {\n        cartQuantity: cartItem.cartQuantity - 1\n      }), ...state.slice(cartItemIndex + 1)];\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}